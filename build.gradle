import com.android.build.gradle.BasePlugin
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    alias libs.plugins.android.application
    alias libs.plugins.android.library apply false
    alias libs.plugins.kotlin
    alias libs.plugins.google.protobuf
    id "foundation.e.bliss.spotless"
    id "foundation.e.bliss.githooks"
}

afterEvaluate {
    tasks.prepareKotlinBuildScriptModel.dependsOn(tasks.copyGitHooks, tasks.installGitHooks)
}

allprojects {
    plugins.withType(BasePlugin).configureEach {
        project.android {
            compileSdk 33

            defaultConfig {
                minSdk 28
                targetSdk 32
                vectorDrawables.useSupportLibrary = true
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            lint {
                abortOnError true
                checkReleaseBuilds false
            }
        }

        project.dependencies {
            implementation libs.androidx.core
        }
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs = ['-Xjvm-default=all']
            jvmTarget = JavaVersion.VERSION_1_8
        }
    }

    ext.addFrameworkJar = { String path ->
        def frameworkJar = new File(rootProject.projectDir, 'prebuilts/' + path)
        if (!frameworkJar.exists()) {
            throw new IllegalArgumentException("Framework jar path doesn't exist")
        }
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile).configureEach {
                options.bootstrapClasspath = files([frameworkJar] + (options.bootstrapClasspath.files as Iterable<File>))
            }
            tasks.withType(KotlinCompile).configureEach {
                it.libraries.setFrom(files([frameworkJar] + it.libraries.getFrom()))
            }
        }
    }
}

android {
    namespace "com.android.launcher3"
    useLibrary "android.test.mock"

    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()

    if (!versionPropsFile.exists()) {
        versionProps['VERSION_CHANGE'] = '0'
        versionProps['VERSION_MAJOR'] = '3'
        versionProps['VERSION_MINOR'] = '0'
        versionProps['VERSION_PATCH'] = '1'
        versionProps['VERSION_CODE'] = '3000010'
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    def getVersionCode = { ->
        if (versionPropsFile.canRead()) {
            versionProps.load(new FileInputStream(versionPropsFile))
            def versionChange = versionProps['VERSION_CHANGE'].toInteger() + 1
            def versionMinor = versionProps['VERSION_MINOR'].toInteger()
            def versionMajor = versionProps['VERSION_MAJOR'].toInteger()
            def versionPatch = versionProps['VERSION_PATCH'].toInteger()
            // Up version on each 100 cycles of builds
            if (versionChange >= 100) {
                versionPatch = versionProps['VERSION_PATCH'].toInteger() + 1
                versionChange = 0
            }
            if (versionPatch == 9) {
                versionMinor = versionProps['VERSION_MINOR'].toInteger() + 1
                versionPatch = 0
            }
            if (versionMinor == 9) {
                versionMajor = versionProps['VERSION_MAJOR'].toInteger() + 1
                versionMinor = 0
            }
            def versionCode = versionProps['VERSION_CODE'].toInteger()

            versionProps['VERSION_CHANGE'] = versionChange.toString()
            versionProps['VERSION_PATCH'] = versionPatch.toString()
            versionProps['VERSION_MINOR'] = versionMinor.toString()
            versionProps['VERSION_MAJOR'] = versionMajor.toString()
            versionProps['VERSION_CODE'] = (versionCode.toInteger() + 1).toString()
            versionProps.store(versionPropsFile.newWriter(), null)
            return versionCode
        }
    }

    def getVersionName = { ->
        if (versionPropsFile.canRead()) {
            versionProps.load(new FileInputStream(versionPropsFile))

            def versionMajor = versionProps['VERSION_MAJOR']
            def versionMinor = versionProps['VERSION_MINOR']
            def versionPatch = versionProps['VERSION_PATCH']

            return "${versionMajor}.${versionMinor}.${versionPatch}-beta"
        }
    }

    defaultConfig {
        versionCode getVersionCode()
        versionName getVersionName()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        debugConfig {
            storeFile file("$rootDir/keystore/testkey.jks")
            storePassword 'testkey'
            keyAlias 'testkey'
            keyPassword 'testkey'
        }

        platformConfig {
            storeFile file("$rootDir/keystore/platform.jks")
            storePassword 'platform'
            keyAlias 'platform'
            keyPassword 'platform'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.platformConfig
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles(getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro")
            signingConfig = signingConfigs.platformConfig
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions.addAll("app", "recents")
    productFlavors {
        aosp {
            dimension "app"
            applicationId 'com.android.launcher3'
        }

        bliss {
            dimension "app"
            applicationId 'foundation.e.blisslauncher'
            isDefault true
        }

        l3go {
            dimension "app"
            applicationId 'com.android.launcher3'
        }

        withQuickstep {
            dimension "recents"
            minSdkVersion 32
        }

        withoutQuickstep {
            dimension "recents"
        }

        configureEach {
            resValue("string", "quickstep_component", "${applicationId}/com.android.launcher3.uioverrides.QuickstepLauncher")
            resValue("string", "launcher_component", "${applicationId}/com.android.launcher3.Launcher")
            buildConfigField("String", "SENTRY_DSN", "\"${System.getenv("SENTRY_DSN")}\"")
        }
    }

    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src']
            manifest.srcFile 'AndroidManifest-common.xml'
            proto {
                srcDirs = ['protos/', 'protos_overrides/']
            }
        }

        aosp {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides']
        }

        aospWithoutQuickstep {
            manifest.srcFile "AndroidManifest.xml"
        }

        aospWithQuickstep {
            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
        }

        bliss {
            java.srcDirs = ['src_flags', 'src_shortcuts_overrides', 'bliss/src']
            res.srcDirs = ['bliss/res', "bliss/res_overrides"]
            manifest.srcFile "bliss/AndroidManifest.xml"
            assets {
                srcDirs 'bliss/assets'
            }
        }

        blissWithoutQuickstep {
            manifest.srcFile "AndroidManifest.xml"
        }

        blissWithQuickstep {
            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
        }

        l3go {
            res.srcDirs = ['go/res']
            java.srcDirs = ['go/src']
            manifest.srcFile "go/AndroidManifest.xml"
        }

        l3goWithoutQuickstepDebug {
            manifest.srcFile "AndroidManifest.xml"
        }

        l3goWithQuickstepDebug {
            manifest.srcFile "quickstep/AndroidManifest-launcher.xml"
        }

        withoutQuickstep {
            java.srcDirs = ['src_ui_overrides']
        }

        withQuickstep {
            res.srcDirs = ['quickstep/res', 'quickstep/recents_ui_overrides/res']
            java.srcDirs = ['quickstep/src', 'quickstep/recents_ui_overrides/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }
    }

    lintOptions { disable "LogNotTimber" }

    addFrameworkJar('framework-12.jar')
}

tasks.register('unzipJar', Copy.class) {
    from zipTree('prebuilts/classes.jar')
    into("$buildDir/libs/classes")
    include "**/*.class"
    exclude "android/**"
    exclude "androidx/**"
    exclude "com/airbnb/**"
    exclude "com/android/launcher3/**"
    exclude "com/android/quickstep/**"
    exclude "com/google/**"
    exclude "kotlin/**"
    exclude "META-INF/**"
    exclude "okio/**"
    exclude "org/**"
}

tasks.register('makeReleaseJar', Jar.class) {
    archiveName('Launcher3QuickStepLib.jar')
    from("$buildDir/libs/classes")
    destinationDir(file('prebuilts'))
}

dependencies {
    api libs.airbnb.lottie
    implementation libs.androidx.dynamicanimation
    implementation libs.androidx.recyclerview
    implementation libs.androidx.preference
    implementation libs.google.protobuf.javalite
    implementation libs.google.material
    implementation libs.androidx.slice.view
    implementation libs.reactivex.rxkotlin3
    implementation libs.hoko.blur
    implementation libs.elib
    implementation libs.e.telemetry
    implementation libs.timber

    implementation libs.square.gson
    implementation libs.square.logging
    implementation libs.square.okhttp
    implementation libs.square.retrofit

    implementation fileTree(dir: "prebuilts", include: 'Launcher3QuickStepLib.jar')
    implementation project(':IconLoader')
}

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = "com.google.protobuf:protoc:3.21.12"
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
                java {
                    option "lite"
                }
            }
        }
    }
}
